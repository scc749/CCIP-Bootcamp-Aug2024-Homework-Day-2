/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../../../common";
import type {
  MockCCIPRouter,
  MockCCIPRouterInterface,
} from "../../../../../../../../../@chainlink/contracts-ccip/src/v0.8/ccip/test/mocks/MockRouter.sol/MockCCIPRouter";

const _abi = [
  {
    inputs: [],
    name: "InsufficientFeeTokenAmount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "encodedAddress",
        type: "bytes",
      },
    ],
    name: "InvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidExtraArgsTag",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidMsgValue",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyOffRamp",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "error",
        type: "bytes",
      },
    ],
    name: "ReceiverError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "UnsupportedDestinationChain",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "sourceChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "offRamp",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "calldataHash",
        type: "bytes32",
      },
    ],
    name: "MessageExecuted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "retData",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gasUsed",
        type: "uint256",
      },
    ],
    name: "MsgExecuted",
    type: "event",
  },
  {
    inputs: [],
    name: "DEFAULT_GAS_LIMIT",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GAS_FOR_CALL_EXACT_CHECK",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipSend",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "getOnRamp",
    outputs: [
      {
        internalType: "address",
        name: "onRampAddress",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "tokens",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "isChainSupported",
    outputs: [
      {
        internalType: "bool",
        name: "supported",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isOffRamp",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
      {
        internalType: "uint16",
        name: "gasForCallExactCheck",
        type: "uint16",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "routeMessage",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "retData",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "gasUsed",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061256a806100206000396000f3fe6080604052600436106100865760003560e01c8063a48a905811610059578063a48a905814610174578063a8d87a3b146101b1578063d6be695a146101ee578063ee18e0d314610219578063fbca3b741461024457610086565b806320487ded1461008b5780633cf97983146100c857806383826b2b1461010757806396f4e9f914610144575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190611344565b610281565b6040516100bf91906113af565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea9190611428565b610289565b6040516100fe93929190611545565b60405180910390f35b34801561011357600080fd5b5061012e60048036038101906101299190611583565b6102b4565b60405161013b91906115c3565b60405180910390f35b61015e600480360381019061015991906115fd565b6102c0565b60405161016b9190611672565b60405180910390f35b34801561018057600080fd5b5061019b6004803603810190610196919061168d565b610646565b6040516101a891906115c3565b60405180910390f35b3480156101bd57600080fd5b506101d860048036038101906101d3919061168d565b610651565b6040516101e591906116c9565b60405180910390f35b3480156101fa57600080fd5b5061020361065f565b60405161021091906116f3565b60405180910390f35b34801561022557600080fd5b5061022e610666565b60405161023b919061171d565b60405180910390f35b34801561025057600080fd5b5061026b6004803603810190610266919061168d565b61066c565b60405161027891906117f6565b60405180910390f35b600092915050565b6000606060006102a48761029c90611924565b8787876106bf565b9250925092509450945094915050565b60006001905092915050565b600060208280600001906102d49190611946565b905014610328578180600001906102eb9190611946565b6040517f370d875f00000000000000000000000000000000000000000000000000000000815260040161031f9291906119d6565b60405180910390fd5b600082806000019061033a9190611946565b81019061034791906119fa565b905073ffffffffffffffffffffffffffffffffffffffff801681118061036d5750600a81105b156103bf578280600001906103829190611946565b6040517f370d875f0000000000000000000000000000000000000000000000000000000081526004016103b69291906119d6565b60405180910390fd5b600081905060006103de8580608001906103d99190611946565b61087b565b6000015190506000856040516020016103f79190611d19565b60405160208183030381529060405280519060200120905060006040518060a0016040528083815260200167de41ba4fc9d91ad967ffffffffffffffff1681526020013360405160200161044b91906116c9565b604051602081830303815290604052815260200188806020019061046f9190611946565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018880604001906104c79190611d3b565b808060200260200160405190810160405280939291908181526020016000905b82821015610517578484839050604002018036038101906105089190611d9e565b815260200190600101906104e7565b5050505050815250905060005b8780604001906105349190611d3b565b90508110156105dd576105cc33868a80604001906105529190611d3b565b8581811061056357610562611dcb565b5b905060400201602001358b806040019061057d9190611d3b565b8681811061058e5761058d611dcb565b5b90506040020160000160208101906105a69190611dfa565b73ffffffffffffffffffffffffffffffffffffffff16610964909392919063ffffffff16565b806105d690611e56565b9050610524565b506000806105ef8361138887896106bf565b50915091508161063657806040517f0a8d6e8c00000000000000000000000000000000000000000000000000000000815260040161062d9190611e9e565b60405180910390fd5b8397505050505050505092915050565b600060019050919050565b600063499602d29050919050565b62030d4081565b61138881565b6060600067ffffffffffffffff81111561068957610688610f62565b5b6040519080825280602002602001820160405280156106b75781602001602082028036833780820191505090505b509050919050565b600060606000808473ffffffffffffffffffffffffffffffffffffffff163b1480610730575061072e7f85572ffb000000000000000000000000000000000000000000000000000000008573ffffffffffffffffffffffffffffffffffffffff166109ed90919063ffffffff16565b155b15610754576000806040518060200160405280600081525090925092509250610871565b60006385572ffb60e01b8860405160240161076f9190612068565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506107dc8186888a6084610a12565b8094508195508296505050507fa8b0355886b5b7a28bb97e4f0a24feb172618407402721c4012d8b7c6433102f84848460405161081b93929190611545565b60405180910390a17f9b877de93ea9895756e337442c657f95a34fc68e7eb988bdfa693d5be83016b688600001518960200151338480519060200120604051610867949392919061208a565b60405180910390a1505b9450945094915050565b610883610ee5565b600083839050036108b157604051806020016040528062030d4067ffffffffffffffff16815250905061095e565b6397a657c960e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168383906108e59190612113565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461093b576040517f5247fdce00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282600490809261094e9392919061217c565b81019061095b91906121f3565b90505b92915050565b6109e7846323b872dd60e01b85858560405160240161098593929190612220565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b45565b50505050565b60006109f883610c0c565b8015610a0a5750610a098383610c59565b5b905092915050565b6000606060008361ffff1667ffffffffffffffff811115610a3657610a35610f62565b5b6040519080825280601f01601f191660200182016040528015610a685781602001600182028036833780820191505090505b509150863b610a9b577f0c3b563c0000000000000000000000000000000000000000000000000000000060005260046000fd5b5a85811015610ace577fafa32a2c0000000000000000000000000000000000000000000000000000000060005260046000fd5b85810390508660408204820311610b09577f37c3be290000000000000000000000000000000000000000000000000000000060005260046000fd5b5a6000808b5160208d0160008d8df194505a810392503d86811115610b2c578690505b808552806000602087013e505050955095509592505050565b6000610ba7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d189092919063ffffffff16565b9050600081511115610c075780806020019051810190610bc79190612283565b610c06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfd90612333565b60405180910390fd5b5b505050565b6000610c38827f01ffc9a700000000000000000000000000000000000000000000000000000000610c59565b8015610c525750610c508263ffffffff60e01b610c59565b155b9050919050565b6000806301ffc9a760e01b83604051602401610c759190612362565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d91506000519050828015610d00575060208210155b8015610d0c5750600081115b94505050505092915050565b6060610d278484600085610d30565b90509392505050565b606082471015610d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6c906123ef565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610d9e919061244b565b60006040518083038185875af1925050503d8060008114610ddb576040519150601f19603f3d011682016040523d82523d6000602084013e610de0565b606091505b5091509150610df187838387610dfd565b92505050949350505050565b60608315610e5f576000835103610e5757610e1785610e72565b610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d906124ae565b60405180910390fd5b5b829050610e6a565b610e698383610e95565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610ea85781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc9190612512565b60405180910390fd5b6040518060200160405280600081525090565b6000604051905090565b600080fd5b600080fd5b600067ffffffffffffffff82169050919050565b610f2981610f0c565b8114610f3457600080fd5b50565b600081359050610f4681610f20565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f9a82610f51565b810181811067ffffffffffffffff82111715610fb957610fb8610f62565b5b80604052505050565b6000610fcc610ef8565b9050610fd88282610f91565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561100757611006610f62565b5b61101082610f51565b9050602081019050919050565b82818337600083830152505050565b600061103f61103a84610fec565b610fc2565b90508281526020810184848401111561105b5761105a610fe7565b5b61106684828561101d565b509392505050565b600082601f83011261108357611082610fe2565b5b813561109384826020860161102c565b91505092915050565b600067ffffffffffffffff8211156110b7576110b6610f62565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110f8826110cd565b9050919050565b611108816110ed565b811461111357600080fd5b50565b600081359050611125816110ff565b92915050565b6000819050919050565b61113e8161112b565b811461114957600080fd5b50565b60008135905061115b81611135565b92915050565b60006040828403121561117757611176610f4c565b5b6111816040610fc2565b9050600061119184828501611116565b60008301525060206111a58482850161114c565b60208301525092915050565b60006111c46111bf8461109c565b610fc2565b905080838252602082019050604084028301858111156111e7576111e66110c8565b5b835b8181101561121057806111fc8882611161565b8452602084019350506040810190506111e9565b5050509392505050565b600082601f83011261122f5761122e610fe2565b5b813561123f8482602086016111b1565b91505092915050565b600060a0828403121561125e5761125d610f4c565b5b61126860a0610fc2565b9050600082013567ffffffffffffffff81111561128857611287610fdd565b5b6112948482850161106e565b600083015250602082013567ffffffffffffffff8111156112b8576112b7610fdd565b5b6112c48482850161106e565b602083015250604082013567ffffffffffffffff8111156112e8576112e7610fdd565b5b6112f48482850161121a565b604083015250606061130884828501611116565b606083015250608082013567ffffffffffffffff81111561132c5761132b610fdd565b5b6113388482850161106e565b60808301525092915050565b6000806040838503121561135b5761135a610f02565b5b600061136985828601610f37565b925050602083013567ffffffffffffffff81111561138a57611389610f07565b5b61139685828601611248565b9150509250929050565b6113a98161112b565b82525050565b60006020820190506113c460008301846113a0565b92915050565b600080fd5b600060a082840312156113e5576113e46113ca565b5b81905092915050565b600061ffff82169050919050565b611405816113ee565b811461141057600080fd5b50565b600081359050611422816113fc565b92915050565b6000806000806080858703121561144257611441610f02565b5b600085013567ffffffffffffffff8111156114605761145f610f07565b5b61146c878288016113cf565b945050602061147d87828801611413565b935050604061148e8782880161114c565b925050606061149f87828801611116565b91505092959194509250565b60008115159050919050565b6114c0816114ab565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156115005780820151818401526020810190506114e5565b60008484015250505050565b6000611517826114c6565b61152181856114d1565b93506115318185602086016114e2565b61153a81610f51565b840191505092915050565b600060608201905061155a60008301866114b7565b818103602083015261156c818561150c565b905061157b60408301846113a0565b949350505050565b6000806040838503121561159a57611599610f02565b5b60006115a885828601610f37565b92505060206115b985828601611116565b9150509250929050565b60006020820190506115d860008301846114b7565b92915050565b600060a082840312156115f4576115f36113ca565b5b81905092915050565b6000806040838503121561161457611613610f02565b5b600061162285828601610f37565b925050602083013567ffffffffffffffff81111561164357611642610f07565b5b61164f858286016115de565b9150509250929050565b6000819050919050565b61166c81611659565b82525050565b60006020820190506116876000830184611663565b92915050565b6000602082840312156116a3576116a2610f02565b5b60006116b184828501610f37565b91505092915050565b6116c3816110ed565b82525050565b60006020820190506116de60008301846116ba565b92915050565b6116ed81610f0c565b82525050565b600060208201905061170860008301846116e4565b92915050565b611717816113ee565b82525050565b6000602082019050611732600083018461170e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61176d816110ed565b82525050565b600061177f8383611764565b60208301905092915050565b6000602082019050919050565b60006117a382611738565b6117ad8185611743565b93506117b883611754565b8060005b838110156117e95781516117d08882611773565b97506117db8361178b565b9250506001810190506117bc565b5085935050505092915050565b600060208201905081810360008301526118108184611798565b905092915050565b61182181611659565b811461182c57600080fd5b50565b60008135905061183e81611818565b92915050565b600060a0828403121561185a57611859610f4c565b5b61186460a0610fc2565b905060006118748482850161182f565b600083015250602061188884828501610f37565b602083015250604082013567ffffffffffffffff8111156118ac576118ab610fdd565b5b6118b88482850161106e565b604083015250606082013567ffffffffffffffff8111156118dc576118db610fdd565b5b6118e88482850161106e565b606083015250608082013567ffffffffffffffff81111561190c5761190b610fdd565b5b6119188482850161121a565b60808301525092915050565b60006119303683611844565b9050919050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261196357611962611937565b5b80840192508235915067ffffffffffffffff8211156119855761198461193c565b5b6020830192506001820236038313156119a1576119a0611941565b5b509250929050565b60006119b583856114d1565b93506119c283858461101d565b6119cb83610f51565b840190509392505050565b600060208201905081810360008301526119f18184866119a9565b90509392505050565b600060208284031215611a1057611a0f610f02565b5b6000611a1e8482850161114c565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611a5357611a52611a31565b5b83810192508235915060208301925067ffffffffffffffff821115611a7b57611a7a611a27565b5b600182023603831315611a9157611a90611a2c565b5b509250929050565b600082825260208201905092915050565b6000611ab68385611a99565b9350611ac383858461101d565b611acc83610f51565b840190509392505050565b60008083356001602003843603038112611af457611af3611a31565b5b83810192508235915060208301925067ffffffffffffffff821115611b1c57611b1b611a27565b5b604082023603831315611b3257611b31611a2c565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b6000611b646020840184611116565b905092915050565b6000611b7b602084018461114c565b905092915050565b611b8c8161112b565b82525050565b60408201611ba36000830183611b55565b611bb06000850182611764565b50611bbe6020830183611b6c565b611bcb6020850182611b83565b50505050565b6000611bdd8383611b92565b60408301905092915050565b600082905092915050565b6000604082019050919050565b6000611c0d8385611b3a565b9350611c1882611b4b565b8060005b85811015611c5157611c2e8284611be9565b611c388882611bd1565b9750611c4383611bf4565b925050600181019050611c1c565b5085925050509392505050565b600060a08301611c716000840184611a36565b8583036000870152611c84838284611aaa565b92505050611c956020840184611a36565b8583036020870152611ca8838284611aaa565b92505050611cb96040840184611ad7565b8583036040870152611ccc838284611c01565b92505050611cdd6060840184611b55565b611cea6060860182611764565b50611cf86080840184611a36565b8583036080870152611d0b838284611aaa565b925050508091505092915050565b60006020820190508181036000830152611d338184611c5e565b905092915050565b60008083356001602003843603038112611d5857611d57611937565b5b80840192508235915067ffffffffffffffff821115611d7a57611d7961193c565b5b602083019250604082023603831315611d9657611d95611941565b5b509250929050565b600060408284031215611db457611db3610f02565b5b6000611dc284828501611161565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611e1057611e0f610f02565b5b6000611e1e84828501611116565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e618261112b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e9357611e92611e27565b5b600182019050919050565b60006020820190508181036000830152611eb8818461150c565b905092915050565b611ec981611659565b82525050565b611ed881610f0c565b82525050565b6000611ee9826114c6565b611ef38185611a99565b9350611f038185602086016114e2565b611f0c81610f51565b840191505092915050565b600081519050919050565b6000819050602082019050919050565b604082016000820151611f486000850182611764565b506020820151611f5b6020850182611b83565b50505050565b6000611f6d8383611f32565b60408301905092915050565b6000602082019050919050565b6000611f9182611f17565b611f9b8185611b3a565b9350611fa683611f22565b8060005b83811015611fd7578151611fbe8882611f61565b9750611fc983611f79565b925050600181019050611faa565b5085935050505092915050565b600060a083016000830151611ffc6000860182611ec0565b50602083015161200f6020860182611ecf565b50604083015184820360408601526120278282611ede565b915050606083015184820360608601526120418282611ede565b9150506080830151848203608086015261205b8282611f86565b9150508091505092915050565b600060208201905081810360008301526120828184611fe4565b905092915050565b600060808201905061209f6000830187611663565b6120ac60208301866116e4565b6120b960408301856116ba565b6120c66060830184611663565b95945050505050565b600082905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600082821b905092915050565b600061211f83836120cf565b8261212a81356120da565b9250600482101561216a576121657fffffffff0000000000000000000000000000000000000000000000000000000083600403600802612106565b831692505b505092915050565b600080fd5b600080fd5b600080858511156121905761218f612172565b5b838611156121a1576121a0612177565b5b6001850283019150848603905094509492505050565b6000602082840312156121cd576121cc610f4c565b5b6121d76020610fc2565b905060006121e78482850161114c565b60008301525092915050565b60006020828403121561220957612208610f02565b5b6000612217848285016121b7565b91505092915050565b600060608201905061223560008301866116ba565b61224260208301856116ba565b61224f60408301846113a0565b949350505050565b612260816114ab565b811461226b57600080fd5b50565b60008151905061227d81612257565b92915050565b60006020828403121561229957612298610f02565b5b60006122a78482850161226e565b91505092915050565b600082825260208201905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061231d602a836122b0565b9150612328826122c1565b604082019050919050565b6000602082019050818103600083015261234c81612310565b9050919050565b61235c816120da565b82525050565b60006020820190506123776000830184612353565b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006123d96026836122b0565b91506123e48261237d565b604082019050919050565b60006020820190508181036000830152612408816123cc565b9050919050565b600081905092915050565b6000612425826114c6565b61242f818561240f565b935061243f8185602086016114e2565b80840191505092915050565b6000612457828461241a565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612498601d836122b0565b91506124a382612462565b602082019050919050565b600060208201905081810360008301526124c78161248b565b9050919050565b600081519050919050565b60006124e4826124ce565b6124ee81856122b0565b93506124fe8185602086016114e2565b61250781610f51565b840191505092915050565b6000602082019050818103600083015261252c81846124d9565b90509291505056fea264697066735822122096f744c5b59b42d87dddb5fd6f7ea262daf78ffaf468addd1bba8a7e4c57e7ba64736f6c63430008130033";

type MockCCIPRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCCIPRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCCIPRouter__factory extends ContractFactory {
  constructor(...args: MockCCIPRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockCCIPRouter> {
    return super.deploy(overrides || {}) as Promise<MockCCIPRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockCCIPRouter {
    return super.attach(address) as MockCCIPRouter;
  }
  override connect(signer: Signer): MockCCIPRouter__factory {
    return super.connect(signer) as MockCCIPRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCCIPRouterInterface {
    return new utils.Interface(_abi) as MockCCIPRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockCCIPRouter {
    return new Contract(address, _abi, signerOrProvider) as MockCCIPRouter;
  }
}
